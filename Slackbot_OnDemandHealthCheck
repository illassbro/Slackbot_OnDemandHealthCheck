[[ SLACK BOT: OnDemand web test automation ]]

If you can do it on you own; then, you can likely save some money on Synthetic web test automation like New Relic Synthetics. 

This is a proof of concept for a Slackbot testing appratius for QA/Operations with a simple DSL(no coding required). You upload tests and get results (Text/Pictures) from web apps on slack. 
You can repeat test interactions and monitor apps via automatic testing by later linking them to email alerts or posting to other channels.


[[ OnDemandHealthCheck (USAGE) ]]

#On Demand HealthCheck: Testing From Slack

#IS WEB TEST BOT ALIVE?
SEND: ping
SEND: pong

#LIST CURRENT TESTS? 
SEND: ...

#RUN WEB TEST?
SEND: test TESTNAME

#AutoCheck?
If "idle" for 10+ minutes it will queue up and auto run (all) web tests (one test every 5 min); while, on demand tests can be run at anytime...



### PROBLEMS? 
###
###

#It can recover from most problems; however watch the logs for "thread death/exit", if this occurs restart it... 

#WATCH LOGS
journalctl -u OnDemandHealthCheck.service --no-pager -f #CTRL-C

#RESTART
systemctl status OnDemandHealthCheck
systemctl stop OnDemandHealthCheck
systemctl start OnDemandHealthCheck
systemctl status OnDemandHealthCheck
journalctl -u OnDemandHealthCheck.service --no-pager -f #CTRL-C








[[ SETUP SLACKBOT  ]]

## MAKE AN ACCOUNT/CHANNEL
## 
##

https://slack.com/
https://yourworkspace.slack.com


## MAKE A BOT
## 
##

## Go to the APPS in yourworkspace
https://yourworkspace.slack.com/apps

#NOTE: Copy the API Token
API_Token='<API Token>'

## ON_SLACK_CHANNEL(Invite your BOT): /invite @<YOUR_BOT_NAME>
/invite @YOUR_BOT_NAME








[[ DEPLOY CODE: OnDemandHealthCheck (INFRASTRUCTURE) ]]

### BUILD TESTING INFRASTRUCTURE (CentOS/Fedora/Oracle Linux/Amazon Linux)
### 
###


[[ INSTALL SELENIUM + JAVA + SLACK CLIENT ]]

===============================================================
* Java JDK
* SELENIUM + DEPS
* Google Crome webrowser [Headless webrowser function]
* Slacklet
===============================================================


## LOGIN
##
#Note: Put all this junk in the same folder as the code as it makes it easier; enjoy!
sshpass -p '123456' ssh ec2-user@scripthost1

sudo mkdir -p /OnDemandHealthCheck/webtest
cd  /OnDemandHealthCheck/

### Install Java SDK
### 
### 
# http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
#

# Install Java JDK
yum -y install java-1.8.0-openjdk\*
java -version 

#TEST JDK
java -version 
echo 'public class HelloWorld { public static void main(String[] args) { System.out.println("Hello, World"); }}' > HelloWorld.java
cat HelloWorld.java
javac HelloWorld.java
java HelloWorld




###  Install CHROME (Google webrowser)
###  
###

sudo mkdir -p /OnDemandHealthCheck/webtest
cd  /OnDemandHealthCheck/

wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
sudo yum -y install ./google-chrome-stable_current_*.rpm
sudo yum -y install gtk3-devel

## ALT INSTALL
## 

sudo yum install -y google-chrome-stable 


## TEST HEADLESS CHROME (AKA: chromium-browser, google-chrome, chrome  )
##

#REF: https://developers.google.com/web/updates/2017/04/headless-chrome
google-chrome -headless --disable-dev-shm-usage http://www.amazon.com
google-chrome-stable --version
chromium-browser --version
chrome --version

google-chrome --no-sandbox --headless --disable-dev-shm-usage --disable-gpu --dump-dom https://www.chromestatus.com/

google-chrome --headless --disable-gpu --dump-dom https://www.chromestatus.com/
google-chrome --headless --disable-gpu --print-to-pdf https://www.chromestatus.com/
google-chrome --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/

chromium-browser --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/
chrome --headless --disable-gpu --screenshot --window-size=1280,1696 https://www.chromestatus.com/
display screenshot.png 



### GET CHROME DRIVER
### 
### 

#GET DRIVER
http://chromedriver.chromium.org/downloads

sudo mkdir -p /OnDemandHealthCheck
sudo chown -R yourusername:yourgroupname .
cd /OnDemandHealthCheck

VERSION=$(google-chrome -version | sed 's/\./#/3;s/#.*//;s/ /#/g;s/.*#//')
LINK=$(wget https://chromedriver.chromium.org/downloads -O - 2>&1 | sed 's/</\n&/g;s/>/&\n/g' | grep -i "index.html?path=" | sed 's/\.\.//;s/="/#/1;s/.*#//;s/\/".*//' | grep ${VERSION} | head -1 )
URL=$(echo ${LINK} | sed 's/.*/&\//')

firefox ${URL}
cp ~/Downloads/chromedriver_linux64.zip .

file chromedriver_linux64.zip
unzip chromedriver_linux64.zip
file chromedriver




### IMAGE MANIPULATION (Code BIN DEP): convert/ImageMagick
### 
### 

sudo yum -y install ImageMagick


### SLACK IMAGE UPLOAD(Code BIN DEP): slack-cli
### 
### 

#INSTALL CURL
sudo yum -y install curl

API_Token='<API Token>'
CHANNEL='CHANNEL_NAME'
wget -O giphy.gif https://media.giphy.com/media/7kn27lnYSAE9O/giphy.gif
curl -F file=@giphy.gif -F "initial_comment=RUN" -F channels=${CHANNEL} -H "Authorization: Bearer ${API_Token}" https://slack.com/api/files.upload



### (Optional) To Maintain Code: astyle
### 
### 
#sudo yum -y install astyle


### SLACK CLIENT LIBRARY: Slacklet + Deps
###
###

cd /OnDemandHealthCheck

wget --no-check-certificate 'https://repo1.maven.org/maven2/org/riversun/slacklet/1.0.4/slacklet-1.0.4.jar'
#https://github.com/riversun/slacklet/blob/master/pom.xml
jar -tvf slacklet-1.0.4.jar

wget --no-check-certificate 'https://repo1.maven.org/maven2/com/google/code/gson/gson/2.6.2/gson-2.6.2.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/javax/websocket/javax.websocket-api/1.1/javax.websocket-api-1.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/javax/websocket/javax.websocket-client-api/1.1/javax.websocket-client-api-1.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4/httpcore-4.4.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.4/httpclient-4.4.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/httpcomponents/httpmime/4.4/httpmime-4.4.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/glassfish/tyrus/bundles/tyrus-standalone-client/1.13/tyrus-standalone-client-1.13.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/threeten/threetenbp/1.3.1/threetenbp-1.3.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/commons-codec/commons-codec/1.9/commons-codec-1.9.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar'
find /OnDemandHealthCheck



### WEB TEST/AUTOMATION LIBRARY: Selenium + Deps
### 
### 

cd /OnDemandHealthCheck

#wget --no-check-certificate 'https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-windows.zip' -O phantomjs-2.1.1-windows.zip 
wget --no-check-certificate 'https://selenium-release.storage.googleapis.com/2.53/selenium-java-2.53.1.zip'
#wget --no-check-certificate 'https://repo1.maven.org/maven2/org/seleniumhq/selenium/selenium-htmlunit-driver/2.52.0/selenium-htmlunit-driver-2.52.0.jar'
#wget --no-check-certificate 'https://central.maven.org/maven2/com/codeborne/phantomjsdriver/1.2.1/phantomjsdriver-1.2.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/commons/commons-exec/1.3/commons-exec-1.3.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/commons-io/commons-io/2.4/commons-io-2.4.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5/httpclient-4.5.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.1/httpcore-4.4.1.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/net/java/dev/jna/jna/3.3.0/jna-3.3.0.jar'
wget --no-check-certificate 'https://repo1.maven.org/maven2/net/java/dev/jna/jna/3.3.0/jna-3.3.0-platform.jar'
wget --no-check-certificate 'https://repository.springsource.com/ivy/bundles/external/net.sourceforge.cglib/com.springsource.net.sf.cglib/2.2.0/com.springsource.net.sf.cglib-2.2.0.jar'
find /OnDemandHealthCheck
	
## UNZIP THIS
jar -xvf selenium-java-2.53.1.zip 
find /OnDemandHealthCheck


### BUILD CLASS_STRING FROM DIR
### 
### 

find /OnDemandHealthCheck
find . -maxdepth 1 -type f | sed 's/^..//' | xargs | sed 's/ /:/g;s/^./:&/;s/.*/SELENIUM='"'selenium-2.53.1\/selenium-java-2.53.1.jar:&'"'/'







[[ SETUP TO RUN AS A SERVICE ]]

### SET PERMISSIONS
### 
### 
chown -R yourusername:yourgroupname /OnDemandHealthCheck
chmod -R 777 /OnDemandHealthCheck


### ADD BOT (UID) TO SUDO [[ Some commands need to run as root ]]
### 
### 

visudo
yourusername ALL = (root) NOPASSWD: ALL


###  ADD SERVICE TO SYSTEMD
### 
###  

sshpass -p '123456' ssh ec2-user@scripthost1

mkdir -p /etc/systemd/system/
touch /etc/systemd/system/OnDemandHealthCheck.service


CLASSPATH=
HOMEDIR='.'
SELENIUM='selenium-2.53.1/selenium-java-2.53.1.jar::gson-2.3.1.jar:javax.websocket-client-api-1.1.jar:tyrus-standalone-client-1.13.jar:commons-exec-1.3.jar:commons-io-2.4.jar:guava-19.0.jar:httpclient-4.5.jar:selenium-java-2.53.1.zip:httpcore-4.4.jar:chromedriver_linux64.zip:threetenbp-1.3.1.jar:javax.websocket-api-1.1.jar:slacklet-1.0.4.jar:commons-codec-1.9.jar:httpmime-4.4.jar:gson-2.6.2.jar:jna-3.3.0-platform.jar:jna-3.3.0.jar:com.springsource.net.sf.cglib-2.2.0.jar:chromedriver:httpcore-4.4.1.jar:commons-logging-1.2.jar:OnDemandHealthCheck.java:httpclient-4.4.jar'
SLACK=':slacklet-1.0.4.jar:gson-2.6.2.jar:javax.websocket-api-1.1.jar:javax.websocket-client-api-1.1.jar:httpcore-4.4.jar:httpclient-4.4.jar:httpmime-4.4.jar:tyrus-standalone-client-1.13.jar:threetenbp-1.3.1.jar:commons-codec-1.9.jar:commons-logging-1.2.jar'
CLASSPATH="${HOMEDIR}${SELENIUM}${SLACK}"

cat <<EOF> /etc/systemd/system/OnDemandHealthCheck.service
[Unit]
Description=OnDemandHealthCheck

[Service]
Restart=always
Restart=on-failure
StartLimitIntervalSec=120
StartLimitBurst=100

#User=nobody
User=apache
WorkingDirectory=/OnDemandHealthCheck
ExecStart=/usr/bin/java -Xms256m -Xmx2048m -cp ${CLASSPATH} OnDemandHealthCheck
SuccessExitStatus=143

[Install]
WantedBy=multi-user.target
EOF

cat /etc/systemd/system/OnDemandHealthCheck.service


systemctl daemon-reload



#### USE/TEST SERVICE
#### 
#### 

## ENABLE/START SERVICE
systemctl daemon-reload
systemctl enable OnDemandHealthCheck.service
systemctl start OnDemandHealthCheck
systemctl status OnDemandHealthCheck
journalctl -u OnDemandHealthCheck.service --no-pager -f #CTRL-C

netstat -planet | grep java


## REMOVE
#systemctl stop OnDemandHealthCheck
#systemctl disable OnDemandHealthCheck.service
#systemctl daemon-reload
#rm /etc/systemd/system/OnDemandHealthCheck.service


## RESTART
systemctl status OnDemandHealthCheck
systemctl stop OnDemandHealthCheck
systemctl start OnDemandHealthCheck
systemctl status OnDemandHealthCheck
journalctl -u OnDemandHealthCheck.service --no-pager -f #CTRL-C








[[ BUILD_CODE_RUN_SERVICE ]]

sshpass -p '123456' ssh ec2-user@scripthost1
sudo -s 

cd /OnDemandHealthCheck

WEB=cnn
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = http://www.cnn.com
1.1.0.threadwait = 2000
EOF

WEB=aws
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = https://status.aws.amazon.com/
1.1.0.threadwait = 2000
EOF

## GET CODE
git clone https://github.com/illassbro/Slackbot_OnDemandHealthCheck
cp Slackbot_OnDemandHealthCheck/OnDemandHealthCheck.java .

## MODE CODE
sed -i '/public static String botToken/s/".*"/"'"${API_Token}"'"/' ${CODE}.java 
sed -i '/public static String channelName/s/".*"/"'"${CHANNEL}"'"/' ${CODE}.java 


API_Token='<API Token>'
CHANNEL='CHANNEL_NAME'

CODE=OnDemandHealthCheck
CLASSPATH=
HOMEDIR='.'
SELENIUM=':selenium-2.53.1/selenium-java-2.53.1.jar:jna-3.3.0.jar:jna-3.3.0-platform.jar:guava-19.0.jar:gson-2.3.1.jar:httpclient-4.5.jar:httpcore-4.4.1.jar:commons-io-2.4.jar:commons-exec-1.3.jar:commons-logging-1.2.jar:com.springsource.net.sf.cglib-2.2.0.jar'
SLACK=':slacklet-1.0.4.jar:gson-2.6.2.jar:javax.websocket-api-1.1.jar:javax.websocket-client-api-1.1.jar:httpcore-4.4.jar:httpclient-4.4.jar:httpmime-4.4.jar:tyrus-standalone-client-1.13.jar:threetenbp-1.3.1.jar:commons-codec-1.9.jar:commons-logging-1.2.jar'
CLASSPATH="${HOMEDIR}${SELENIUM}${HTMLUNIT}${SLACK}"
echo ${CLASSPATH}

## BUILD & TEST CODE
javac -cp ${CLASSPATH} ${CODE}.java && \
java -cp ${CLASSPATH} ${CODE}


## BUILD & RUN AS A SERVICE
systemctl stop ${CODE} && \
vi ${CODE}.java && javac -cp ${CLASSPATH} ${CODE}.java && {
systemctl start  ${CODE}
journalctl -u  ${CODE}.service --no-pager -f
}




### FIX ERROR?
### 
### 
[[ Caused by: java.net.UnknownHostException: scripthost1.yourdomain.com: Name or service not known ]]

java.net.UnknownHostException: scripthost1: scripthost1: Name or service not known
	at java.net.InetAddress.getLocalHost(InetAddress.java:1506)
	at OnDemandHealthCheck.getHostIpInfo(OnDemandHealthCheck.java:201)
	at OnDemandHealthCheck.main(OnDemandHealthCheck.java:122)
Caused by: java.net.UnknownHostException: scripthost1: Name or service not known
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:929)
	at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1324)
	at java.net.InetAddress.getLocalHost(InetAddress.java:1501)


## FIX: Make sure all localhost info is set

hostnamectl set-hostname scripthost1

ADD=scripthost1
DOM=yourdomain.com
IP=$(ip addr | sed '/inet /!d;/eth1/!d;s/.*inet //;s/\/.*//')
sed -i '/localhost/a'"${IP}"' '" ${ADD}"' '" ${ADD}.${DOM}"'' /etc/hosts
cat /etc/hosts

getent hosts scripthost1
getent hosts 10.64.20.203








[[ OnDemandHealthCheck (webTest DSL) ]]

MAKE WEB TESTS: For "Frameworkless" On Demand Health Check

### HOWTO?
###
### 

BUILD A COMMAND SEQUENCE
=====================================================================
Dotted.Sequence = <URL>
Dotted.Sequence.<WebElement>.<Command> = <Selenuim Style: WebElement>
Dotted.Sequence.threadwait = <Milliseconds>    #MAKE_PROGRAM_SLEEP 

NOTE: The "Dotted.Sequence" has no limit (Just make sure to keep track of it else, things will be out of order; as only the "Sequence" not the "line number" matters)
1.
1.0.1.
1.0.1.0.0.0.0.0.0.0.0
=====================================================================

COMMAND LIST:
=====================================================================
Command(s)=
	wait  <======[[  Wait for a webelement to become available ]]
	click

WebElement(s)=
	id
	name
	className
	tagName
	linkText
           xpath
           cssSelector

*Special* Command =
          Dotted.Sequence.threadwait =  <Milliseconds>
          NOTE: Threadwait Also takes a "screenshot"
=====================================================================


=====================================================================
    driver.get("https://www.google.com/");
    driver.findElement(By.linkText("Gmail")).click();
    driver.findElement(By.xpath("(//a[contains(text(),'Sign in')])[2]")).click();
    // ERROR: Caught exception [ERROR: Unsupported command [selectWindow | win_ser_1 | ]]
    driver.findElement(By.id("identifierId")).click();
    driver.findElement(By.id("identifierId")).clear();
    driver.findElement(By.id("identifierId")).sendKeys("username@google.com");
    driver.findElement(By.id("identifierId")).sendKeys(Keys.ENTER);
    driver.findElement(By.name("password")).clear();
    driver.findElement(By.name("password")).sendKeys("thisisndnsww");
    driver.findElement(By.xpath("//div[@id='passwordNext']/div/button/div[2]")).click();
=====================================================================
=====================================================================
WEB=gmail
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = https://www.google.com/
2.0.0.linkText.click = Gmail
3.0.0.xpath.click = (//a[contains(text(),'Sign in')])[2]
1.4.0.id = identifierId
1.4.0.id.click = identifierId
1.4.1.sendkeys = testuser@google.com
1.4.2.sendkeys = Keys.ENTER
EOF
=====================================================================



###  HOW TO GET WEB ELEMENTS?
### 
### 

https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Open_the_Inspector
https://discourse.mozilla.org/t/how-can-i-get-the-xpath-of-an-element-in-developer-tools-as-firebug-is-not-supported-in-latest-ff/25934/2

## Cheat Codes: “Use the katalon recorder Luke” -(not) Obi Wan Kenobi
https://chrome.google.com/webstore/detail/katalon-recorder-selenium/ljdobmomdgdljniojadhoplhkpialdid?hl=en-US
https://www.katalon.com/resources-center/blog/katalon-automation-recorder/

#SAMPLE EXPORT
============================================================================================================================================================================================================
#WebElement ["xpath" is normaly the most precise (but it is also a problem for dynamic WebElement)]
(.//*[normalize-space(text()) and normalize-space(.)='My Schedule'])[1]/following::i[1]

  @Test
  public void testUntitledTestCase() throws Exception {
    driver.get("https://www.amazon.com/");
    driver.findElement(By.id("twotabsearchtextbox")).clear();
    driver.findElement(By.id("twotabsearchtextbox")).sendKeys("lenovo");
    driver.findElement(By.xpath("//div[@id='issDiv9']/span[2]")).click();
    driver.findElement(By.xpath("//div[@id='search']/div/div[2]/div/span[3]/div[2]/div[4]/div/span/div/div/div[2]/div[2]/div/div/div/div/div/h2/a/span")).click();
    driver.findElement(By.id("add-to-cart-button")).click();
    driver.findElement(By.xpath("(//input[@type='submit'])[3]")).click();
    driver.findElement(By.xpath("(//input[@type='submit'])[5]")).click();
    driver.findElement(By.id("ap_email")).clear();
    driver.findElement(By.id("ap_email")).sendKeys("noname@example.com");
    driver.findElement(By.name("signIn")).submit();
  }

============================================================================================================================================================================================================




[[ DEPLOY CODE: OnDemandHealthCheck (make tests) ]]

### ADD TESTS for OnDemandHealthCheck
### 
### 

## MAKE CONFIG FILES FOR EACH TEST
#@scripthost1.yourdomain.com
cd /OnDemandHealthCheck/webtest
ls

## TEST ME
WEB=cnn
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = http://www.cnn.com
1.1.0.threadwait = 2000
EOF

WEB=newrelic
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = https://status.newrelic.com/
1.1.0.threadwait = 2000
EOF

WEB=aws
cat <<EOF> /OnDemandHealthCheck/webtest/${WEB}.properties
1.0.0 = https://status.aws.amazon.com/
1.1.0.threadwait = 2000
EOF


#@Slack: #YOUR_SLACK_CHANNEL
# https://yourworkspace.slack.com
...
test cnn
test newrelic
test aws




